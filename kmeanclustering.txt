import torch

def kmeans(x, n_clusters, max_iters=100):
    # Randomly initialize centroids
    indices = torch.randperm(x.size(0))[:n_clusters]
    centroids = x[indices]

    for _ in range(max_iters):
        # Compute distances from data points to centroids
        distances = (x[:, None] - centroids).pow(2).sum(-1)

        # Assign each data point to the closest centroid
        cluster_assignments = distances.argmin(1)

        # Update centroids
        centroids = torch.stack([x[cluster_assignments == i].mean(0) for i in range(n_clusters)])

    return cluster_assignments

# Your data
x = torch.tensor([[0., 0.,0.], [11., 9.,1], [2., 8.,3.], [2., 2.,1.], [8., 3.,6.]])

# Perform k-means clustering
cluster_assignments = kmeans(x, n_clusters=2)

print(cluster_assignments)

// knn clusterring

// https://github.com/unlimblue/KNN_CUDA
import torch
from knn_cuda import KNN

# Make sure your CUDA is available.
assert torch.cuda.is_available()

# Your data
x = torch.tensor([[0., 0.,0.], [11., 9.,1], [2., 8.,3.], [2., 2.,1.], [8., 3.,6.]]).cuda()

# Create a KNN object
knn = KNN(k=2, transpose_mode=True)

# Perform KNN clustering
distances, indices = knn(x, x)

# The indices tensor contains the cluster assignments for each data point
print(indices)
